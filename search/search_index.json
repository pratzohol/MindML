{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>I'm a Fourth year Undergraduate at IIT Delhi majoring in Electrical Engineering. My core interests are in Machine Learning, Deep Learning, and Artificial Intelligence. In addition to these, I enjoy new technology, problem-solving and playing outdoor sports.</p>"},{"location":"#what-is-mindml","title":"What is MindML?","text":"<p>Inspired from Notes on AI, MindML is a personal wiki on AI and ML. It is a collection of notes, resources, and ideas on various topics in AI and ML. The search function and simplistic site makes it easy to navigate and revisit the concepts I have learnt.</p>"},{"location":"#why-mindml","title":"Why MindML?","text":"<p>First of all, I was bored. Second, the concepts, papers and articles I read were all lost and forgotten after few weeks. If I wanted to remember it, I had to again go through the cumbersome task of reading from various sources. </p> <p>Hence, it's better to organize everything in one place. This will also help me in revising the concepts and ideas I have learnt.</p>"},{"location":"#how-i-use-mindml","title":"How I use MindML?","text":"<p>To use MindML, I want myself to go through the pain of reading various articles only once. After that, I want to organize the concepts in my own words and in a way that I can easily understand.</p>"},{"location":"Notes/Definitions/","title":"Definitions","text":"","tags":["Basics"]},{"location":"Notes/Definitions/#1-overview","title":"1. Overview","text":"<p>This post will contain definition of various terms that I come across while reading papers and articles. I will try to keep it updated as I learn more about new terms.</p> <p>These terms are not that complex and time consuming to understand and hence, does not deserve separate posts. So, I will keep on adding them here.</p>","tags":["Basics"]},{"location":"Notes/Definitions/#2-glossary","title":"2. Glossary","text":"","tags":["Basics"]},{"location":"Notes/Definitions/#ccs-concepts","title":"# CCS Concepts","text":"<p>\"CCS Concepts\" typically refers to the concepts or topics within the field of computer science that are relevant to the research presented in the paper. CCS stands for \"ACM Computing Classification System,\" which is a standardized classification system used in the computer science community to categorize research papers and topics.</p>","tags":["Basics"]},{"location":"Notes/Definitions/#ciyml","title":"# CI.yml","text":"<p>CI.yml is a configuration file used in continuous integration (CI) workflows. It is commonly used in conjunction with tools like GitHub Actions, GitLab CI/CD, or other CI/CD platforms. The \"ci.yml\" file contains instructions and settings for automating the build, test, and deployment processes of a software project. It defines the steps, dependencies, environment variables, and other parameters required to perform automated testing and integration tasks.</p>","tags":["Basics"]},{"location":"Notes/Definitions/#pre-train-fine-tune","title":"# Pre-train, Fine-tune","text":"<p>The pre-train, fine-tune paradigm is a common approach used in transfer learning, particularly in the context of deep learning models. It involves two main stages:</p> <ol> <li>Pre-training : In the pre-training stage, a neural network model is trained on a large and diverse dataset, typically on a related but different task. This initial training is called \"pre-training\" because the model is not yet specialized for the specific downstream task of interest. Instead, it learns general features and representations from the data in an unsupervised or supervised manner.</li> <li>Fine-tune :  In this stage, the pre-trained model is further trained on a smaller, task-specific dataset. During fine-tuning, the earlier layers of the model, which capture more generic features, are usually frozen or updated with a lower learning rate to preserve the general knowledge learned during pre-training. The later layers, which capture more task-specific information, are updated with a higher learning rate to allow the model to specialize for the specific task.</li> </ol> <p>CONS : There might be a large training gap between the pre-trained model and the downstream task. This can lead to a phenomenon called \"catastrophic forgetting,\" where the model forgets the general knowledge learned during pre-training as it learns the task-specific information during fine-tuning. This also leads to large fine-tuning time which might become comparable to the training time and hence, becomes computationally expensive.</p>","tags":["Basics"]},{"location":"Notes/Definitions/#secure-multiparty-computation-smc","title":"# Secure Multiparty Computation (SMC)","text":"<p>SMC allows a number of mutually distrustful parties to carry out a joint computation of a function of their inputs, while preserving the privacy of the inputs.</p>","tags":["Basics"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-GPPT/","title":"Prompting over Graphs : GPPT","text":"<p>In this note, I will cover the following paper  GPPT: Graph Pre-training and Prompt Tuning to Generalize Graph Neural Networks</p> <p>NOTE : Definition of In-context Learning (ICL) is already covered. First, I will cover GPPT which is based on Graph prompts. Finally, moving ahead from prompting, we will see how ICL : PRODIGY introduces ICL over graphs.</p>","tags":["Prompting","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-GPPT/#1-abstract","title":"1. Abstract","text":"","tags":["Prompting","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-GPPT/#11-motivation","title":"1.1 Motivation","text":"<ul> <li>The supervised training of GNNs notoriously requires large amounts of labeled data for each downstream task.</li> <li>Alternative : Use Transfer Learning -  using easily accessible information to pre-train GNNs, and fine-tuning them to optimize the downstream task with only a few labels.</li> <li>Design the self-supervised pretext tasks, and encode the universal graph knowledge among the various applications.</li> <li>In rare cases, there is inherent training objective gap between the pretext and downstream tasks.</li> <li>This may lead to costly fine-tuning process to adapt the pre-trained GNNs to the downstream tasks.</li> <li>The naive pre-training strategy usually deteriorates the downstream task and reduces the reliability of transfer learning on graph.</li> <li>Long fine-tuning leads to forgetting of the pre-trained general knowledge. (Catastrophic Forgetting)</li> </ul>","tags":["Prompting","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-GPPT/#12-contributions-of-this-paper","title":"1.2 Contributions of this Paper","text":"<ul> <li>Novel transfer learning paradigm to generalize GNNs, namely graph pre-training and prompt tuning (GPPT).</li> <li>Masked Edge Prediction is used as pretext task to pre-train GNNs.</li> <li>Node Prediction \u2705, Link Prediction \u274c, and Graph Classification \u274c.</li> <li>Graph Prompting function reformulates the downstream task by modifying the standalone node into a token pair and makes it similar to the pre-training task, i.e, edge prediction.</li> <li>The token pair consists of node entity (structure token) and candidate label class (task token).</li> <li>Instead of \"pre-train, fine-tune\" paradigm, GPPT uses \"pre-train, prompt, fine-tune\" paradigm.</li> </ul>","tags":["Prompting","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-GPPT/#2-introduction","title":"2. Introduction","text":"<ul> <li>Task Token : They are the node labels represented by the trainable continuous vectors. It is appended to the the embedding of the target sample. The linking probability between task token and target sample is directly measured through using the pre-trained model. <pre><code>The orthogonal prompt initialization and regularization are proposed to separate the trainable vectors of different labels.\n</code></pre></li> <li>Structure Token : It represents the target sample with its multi-hop neighbourhood.</li> </ul>","tags":["Prompting","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-GPPT/#3-related-work-graph-pre-training","title":"3. Related Work (Graph Pre-training)","text":"<ul> <li>GCC : Leverages contrastive learning to capture the universal network topological properties across multiple networks.</li> <li>GPT-GNN : Introduces a self-supervised attributed graph generation task to pre-train GNN models that can capture the structural and semantic properties of the graph.</li> <li>L2P-GNN : Utilizes meta-learning to learn the fine-tune strategy during the pre-training process.</li> </ul>","tags":["Prompting","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-GPPT/#4-preliminary-knowledge","title":"4. Preliminary Knowledge","text":"","tags":["Prompting","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-GPPT/#41-gnn","title":"4.1 GNN","text":"<ul> <li>Let tuple \\(\\mathcal{G} = (X, A)\\) denote undirected graph, where \\(X \\in  \\mathbb{R}^{N \\times d}\\) is node feature matrix and \\(A \\in \\mathbb{R}^{N \\times N}\\) is adjacency matrix. </li> <li>Suppose the number of graph convolutional layers is \\(K\\). To facilitate the following expression, we use \\(h_i = f_\\theta (\\mathcal{G}, v_i)\\) to represent the final node representation learned from \\(K\\)-layer GNNs, where \\(\\theta = \\{\\theta^{(1)}, \\theta^{(2)}, \\cdots , \\theta^{(K)}\\}\\) denotes the concatenated trainable parameters.</li> </ul>","tags":["Prompting","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-GPPT/#42-pre-train-and-fine-tune-gnns","title":"4.2 Pre-train and Fine-tune GNNs","text":"<p>The edge prediction pretext task works as follows - </p> <ul> <li>Randomly mask partial edges and then train GNNs to reconstruct them.</li> <li>Formally, let \\(\\mathcal{G}^{pre} = (X, A^{pre})\\) denote masked graph. Node Embedding of \\(v_i\\) is given by  \\(h_i = f_\\theta (\\mathcal{G}^{pre}, v_i)\\).</li> <li> <p>Pretext task is to determine whether a node pair is connected, where loss is defined as follows :</p> \\[\\min_{\\theta, \\phi} \\sum_{(v_i, v_j)} \\mathcal{L}^{pre} (p_{\\phi}^{pre}(h_i, h_j); g(v_i, v_j))\\] <p>Node pair \\((v_i, v_j)\\) is either masked edge or sampled negative unconnected pairs. \\(p_{\\phi}^{pre}\\) is projection head to evaluate similarity score of node pair. \\(g(v_i, v_j)\\) is ground truth label of the node pair (i.e., \\(A_{ij}\\)).</p> </li> </ul> <p>Now, under fine-tuning, following loss is optimized -</p> \\[\\min_{\\theta, \\psi} \\sum_{v_i} \\mathcal{L}^{down}(p_{\\psi}^{down}(h_i); g(v_i))\\] <ul> <li>\\(\\theta_{init} = \\theta_{pre}\\), i.e., GNNs are initialized by the optimized parameters from pretext task.</li> <li>\\(p^{down}_{\\phi}(h_i)\\) denotes the new projection head accompanied with parameters \\(\\phi\\), while the pretext projection head is discarded. </li> <li>\\(L^{down}\\) is the downstream loss function (e.g., cross entropy), and \\(g(v_i)\\) denotes the ground-truth label of node \\(v_i\\).</li> </ul>","tags":["Prompting","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-GPPT/#5-graph-prompting-framework","title":"5. Graph Prompting Framework","text":"<ul> <li>First, we note that GNNs\u2019 parameters \\(\\theta\\) are optimized to generate close embeddings for connected node pairs, instead of nodes of the same class. If the disconnected pairs share the same class, the pretrained model requires to be tuned with many epochs to adapted to the new problem. </li> <li>This time-consuming fine-tuning prevents us from efficiently using the pre-trained model. The pre-trained knowledge will also be gradually filtered out in the long tuning process.</li> <li>Second, in the initial stage of fine-tuning, the pre-trained model is not well adapted to the downstream task, and gives wrong classifications.</li> </ul>","tags":["Prompting","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-GPPT/#51-how-to-use-prompt","title":"5.1 How to use Prompt?","text":"<ul> <li>For \\(v_i\\), generate prompt \\(v_i^{'} = f_{prompt}(v_i) = [T_{task}(y), T_{srt}(v_i)]\\) = [task token, structure token].</li> <li>Given the token pairs, \\([T_{task}(y), T_{srt}(v_i)]\\), by embedding them into continuous tensors, one is able to conduct the classification task by fitting the linking probability between the two tokens.</li> </ul> <p>GPPT consists of 3 componets --&gt;</p> <ol> <li>Prompt Addition : The graph prompting function generates a series of token pairs to be classified. Assuming that there are total \\(C\\) classes \\([y_1, y_2, \\cdots, y_C]\\), we construct their corresponding token pairs \\([T_{task}(y_c), T_{srt}(v_i)]\\), for \\(c = 1, 2, \\cdots, C\\).</li> <li>Prompt Answer : Given each token pair \\([T_{task}(y_c), T_{srt}(v_i)]\\), we embed them into continuous vectors. We then concatenate them as input to the pre-trained projection head, and obtain the linking probability. We answer and classify target node \\(v_i\\) with label \\(y_c\\) if it obtains the highest probability.</li> <li> <p>Prompt Tuning : Following the pretext training objective, following loss is optimized :</p> \\[\\min_{\\theta, \\phi} \\sum_{(v_i, y_c)} \\mathcal{L}^{pre} (p_{\\phi}^{pre} (T_{task}(y_c), T_{srt}(v_i)); g(y_c, v_i))\\] <ul> <li>\\(p_{\\phi}^{pre}\\) is the pre-training projection head to evaluate the linking probability of the token pair.</li> <li>\\(g(y_c, v_i)\\) denotes the ground truth connection between label class \\(y_c\\) and target node \\(v_i\\).</li> </ul> </li> </ol>","tags":["Prompting","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-GPPT/#52-prompt-function-design","title":"5.2 Prompt Function Design","text":"","tags":["Prompting","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-GPPT/#521-task-token-generation","title":"5.2.1 Task Token Generation","text":"<ul> <li>The task token \\(T_{task} (y_c)\\) is embedded into a trainable vector: \\(e_c = T_{task} (y_c) \\in \\mathbb{R}^d\\).</li> <li>For the total \\(C\\) classes in the downstream node classification, the task token embeddings are defined by: \\(E = [e_1, \\cdots, e_C] \\in \\mathbb{R}^{C \\times d}\\).</li> <li>Task token is basically class-prototype node added to the original graph. </li> <li>NOTE : The optimal embedding of task token \\(T_{task} (y_c)\\) should be at the center of node embeddings of the class \\(y_c\\).</li> </ul> <p>Importance of cluster structure in graphs --&gt;</p> <ul> <li>It would be hard for the distinct nodes over graph to use and tune the single task token embeddings \\(E\\).</li> <li>Given the edge prediction pretext task, the pre-trained node embeddings will also be clustered in the embedding space.</li> <li>The optimal embedding of task token \\(T_{task} (y_c)\\) should thus vary with clusters. </li> <li>To do better node classification at each cluster, do the cluster-based task token generation, consisting of 3 steps:<ol> <li>Use scalable clustering module (e.g., METIS) to split nodes into non-overlapping clusters : \\(\\{\\mathcal{G}_1, \\cdots, \\mathcal{G}_M\\}\\) where \\(M\\) is hyper-parameter of cluster number.</li> <li>For each individual cluster \\(m\\), there will be an independent task token embeddings : \\(E^m = [e^m_1, \\cdots, e^m_C] \\in \\mathbb{R}^{C \\times d}\\).</li> <li><code>NOTE:</code> For task token \\(T_{task}(y_c)\\) for node \\(v_i\\) belonging to cluster \\(m\\), it's embedding is : \\(e_c^m\\).</li> </ol> </li> </ul>","tags":["Prompting","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-GPPT/#522-structure-token-generation","title":"5.2.2 Structure Token Generation","text":"<ul> <li>According to social network theory, proximal nodes tend to possess similar features and node labels.</li> <li>It also provides redundant information which makes the classification decision robust.</li> <li>Structure token \\(T_{str} (v_i)\\) denotes subgraph centered at node \\(v_i\\).</li> <li>Used 1-hop neighbourhood only.</li> <li>The structure token \\(T_{str} (v_i)\\) is embedded into a continuos vector as :</li> </ul> \\[e_{v_i} = T_{str} (v_i) = a_i * h_i + \\sum_{v_j \\in \\mathcal{N}(v_i)} a_{j} * h_j\\] <ul> <li>\\(a_i\\) are the attention weights learned from the attention function.</li> </ul>","tags":["Prompting","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-GPPT/#53-prompt-initialization-and-orthogonal-prompt-constraint","title":"5.3 Prompt Initialization and Orthogonal Prompt Constraint","text":"<p>Prompt Initialization --&gt;</p> <ul> <li>Optimal node embeddings should be at center of node embeddings. Random initialization may deteriorate the classification at initial stage.</li> <li>Thus, for each cluster \\(m\\), \\(e_c^m\\) is initialized as the mean of node embeddings of training nodes of class \\(y_c\\) in cluster \\(m\\).</li> <li>This means initialization provides the valid task tokens, and ensures the correct classification at the initial stage.</li> </ul> <p>Orthogonal Prompt Constraint --&gt;</p> <ul> <li>NOTE : To conduct correct node classification, the task token embeddings of different classes should be irrelevant to each other.</li> <li>Thus, orthogonality of task token is enforced during model fine-tuning. </li> </ul> \\[\\mathcal{L_o} = \\sum_{m} || E^m (E^m)^T - I ||_F^2\\]","tags":["Prompting","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-GPPT/#54-overall-learning-process","title":"5.4 Overall Learning Process","text":"","tags":["Prompting","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-GPPT/#6-experimental-setup","title":"6. Experimental Setup","text":"","tags":["Prompting","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-GPPT/#7-doubts","title":"7. Doubts","text":"<ol> <li>How is \\(a_i\\) weights of attention function learned in structure token generation? </li> <li>How does the orthogonal constraint equation enforces orthogonality of task token embeddings?</li> </ol>","tags":["Prompting","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-GraphPrompt/","title":"Prompting over Graphs : GraphPrompt","text":"<p>In this note, I will cover the following paper \"GraphPrompt : Unifying Pre-Training and Downstream Tasks for GNN\".</p> <p>NOTE : Definition of In-context Learning (ICL) is already covered. I will cover GraphPrompt which is based on Graph prompts. It takes motivation from Prompting : GPPT. Finally, moving ahead from prompting, we will see how ICL : PRODIGY introduces ICL over graphs.</p>","tags":["Prompting","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-GraphPrompt/#1","title":"1.","text":"","tags":["Prompting","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-PRODIGY/","title":"ICL over Graphs : PRODIGY","text":"<p>In this note, I will cover the following paper \"PRODIGY : Enabling in-context learning over graphs\".</p> <p>NOTE : Definition of In-context Learning (ICL) is already covered.</p>","tags":["Prompting","ICL","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-PRODIGY/#1-introduction","title":"1. Introduction","text":"<p>We can easily infer that the in-context learning is a novel and one of the most intriguing capabilities of language models. However, how to enable in-context learning over graphs is still an unexplored question.</p> <p>An in-context learner for graphs should be able to solve novel tasks on novel graphs. For example, give music product recommendations on Spotify when being trained on Amazon purchasing graph.</p>","tags":["Prompting","ICL","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-PRODIGY/#2-challenges","title":"2. Challenges","text":"<ol> <li>How to formulate and represent node-, edge- and graph-level tasks over graphs with a unified task representation that allows the model to solve diverse tasks without the need for retraining or parameter tuning.</li> <li>How to design model architecture and pre-training objectives that enable in-context learning capabilities across diverse tasks and diverse graphs in the unified task representation.</li> <li>Existing graph pre-training methods only aim to learn good graph encoder and require fine-tuning to adapt to different tasks, while existing meta-learning methods over graphs only aim to generalize across tasks within same graph.</li> </ol> <pre><code>Achieving in-context learning requires generalizing across different graphs and tasks without fine-tuning or parameter tuning.\n</code></pre>","tags":["Prompting","ICL","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-PRODIGY/#21-how-to-tackle-this","title":"2.1. How to tackle this?","text":"<p>The general approach presented to solve these problems as described in this paper is :</p> <ul> <li> <p>Prompt Graph : It provides a way to unify the representation of node-, edge- and graph-level tasks over graphs. It has prompt examples, queries and connected with additional label nodes as shown in Figure below.</p> <p></p> <ul> <li>This is an example of in-context few shot prompting over graphs for edge classification.</li> <li>(A) Given source graph \\(\\mathcal{G}\\), we provide prompt examples \\(\\mathcal{S}\\) and queries \\(\\mathcal{Q}\\). \\(\\mathcal{S}\\) consist of input head and tail nodes and their labels.</li> <li>(B) For each data-point in \\(\\mathcal{S}\\) and \\(\\mathcal{Q}\\), we construct its Data graph \\(\\mathcal{G}^D\\) using the source graph \\(\\mathcal{G}\\).</li> <li>(C) Then, we create Task graph to capture connection between each data-point and label. We learn embedding to represent Data graph as nodes \\(v_x\\) for each data-point. There are label nodes \\(v_y\\) for each y \\(\\in \\mathcal{Y}\\). Each data-point is connected to every label nodes. For data-points in \\(\\mathcal{S}\\), each edge is marked by a boolean value, \\(\\texttt{T}\\) for true label and \\(\\texttt{F}\\) for others. </li> </ul> </li> <li> <p>PRODIGY : Pretraining Over Diverse In-Context Graphs Systems, which is a framework for pre-training in-context learner over prompt graphs.</p> <ul> <li>PRODIGY designs both model architecture and pre-training objectives with in-context task formulation over prompt graph.</li> <li>Model architecture uses GNN to learn embeddings of node/edge representations and an attention mechanism for message passing over prompt graph.</li> </ul> </li> </ul>","tags":["Prompting","ICL","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-PRODIGY/#3-in-context-learning-over-graphs","title":"3. In-Context Learning over Graphs","text":"","tags":["Prompting","ICL","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-PRODIGY/#31-classification-tasks","title":"3.1. Classification Tasks","text":"<ul> <li>Graph is defined as \\(\\mathcal{G} = (\\mathcal{V}, \\mathcal{E}, \\mathcal{R})\\) where \\(\\mathcal{V}\\) is set of nodes, \\(\\mathcal{E}\\) is set of edges and \\(\\mathcal{R}\\) is set of relations. An edge \\(e = (u, r, v) \\in \\mathcal{E}\\) consists of two nodes \\(u\\), \\(v\\) and a relation \\(r \\in R\\).</li> <li>Levels of classification :<ul> <li>Node-level : Given set of classes \\(\\mathcal{Y}\\), predict class label \\(y \\in \\mathcal{Y}\\) for each node \\(v \\in \\mathcal{V}\\). Hence, \\(\\mathcal{X} = V\\).</li> <li>Edge-level : Predict label of potential edges formed by any pair of nodes, i.e., \\(\\mathcal{X} = V \\times V\\). A common special case is that classes are same as the relations, i.e., \\(\\mathcal{Y} = \\mathcal{R}\\).</li> <li>Graph-level : Predict label on sub-graphs, i.e., input consists of nodes and edges both.</li> </ul> </li> <li>Since, we want uniform formulation for different levels of tasks, we define space of input \\(\\mathcal{X}\\) consists of graphs, i.e., \\(x_i \\in \\mathcal{X}\\) where \\(x_i = (\\mathcal{V}_i, \\mathcal{E}_i, \\mathcal{R}_i)\\).<ul> <li>For node-level classification, \\(|\\mathcal{V}_i| = 1\\) and \\(|\\mathcal{E}_i| = 0\\)</li> <li>For edge-level classification, \\(|\\mathcal{V}_i| = 2\\) and \\(|\\mathcal{E}_i| = 0\\) (Since, we are predicting label of potential edges, we don't have any edges in the input, and instead input consists of pair of nodes)</li> </ul> </li> </ul>","tags":["Prompting","ICL","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-PRODIGY/#32-few-shot-prompting","title":"3.2. Few-shot Prompting","text":"<ul> <li>For a k-shot prompt with downstream m-way classification tasks with \\(|\\mathcal{Y}| = m\\) classes, we use small number of input-label pairs \\(\\mathcal{S} = \\{(x_i, y_i)\\}_{i=1}^{m \\cdot k}\\) as prompt examples. Here, we have k samples for each label (class) \\(y_i \\in \\mathcal{Y}\\).</li> <li>Set of queries \\(\\mathcal{Q} = \\{x_i\\}_{i=1}^n\\) is also sampled. We want to predict labels for each query \\(x_i \\in \\mathcal{Q}\\).</li> <li>Important difference between graphs and language models w.r.t. prompting is that the source graph \\(\\mathcal{G}\\) contains information about the input, and hence, we need to include \\(\\mathcal{G}\\) in the prompt.</li> </ul>","tags":["Prompting","ICL","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-PRODIGY/#4-prodigy-solution","title":"4. PRODIGY (Solution)","text":"","tags":["Prompting","ICL","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-PRODIGY/#41-prompt-graph-representation","title":"4.1. Prompt Graph Representation","text":"<p>Given the information as a prompt, the pre-trained model should be able to directly output the predicted labels for the queries via in-context learning. Thus, to formulate information as unified and efficient form of input, this paper proposes their in-context task formulation prompt graph.</p> <p>Prompt graph consists of both Data Graph and Task Graph. </p> <ol> <li> <p>Data graph : We perform contextualization of each data-point in \\(\\mathcal{S}\\) and \\(\\mathcal{Q}\\) using source graph \\(\\mathcal{G}\\). We want to have more information about the data-point \\(x_i = (\\mathcal{V}_i, \\mathcal{E}_i, \\mathcal{R}_i)\\) without having to represent the whole source graph \\(\\mathcal{G}\\).</p> <ul> <li>Intuitively, it makes sense to sample a \\(k\\)-hop neighborhood to construct data graph \\(\\mathcal{G}^D\\).</li> <li>Formally, \\(\\mathcal{G}_i^D = (\\mathcal{V}_i^D, \\mathcal{E}_i^D, \\mathcal{R}_i^D) \\sim \\bigoplus_{j = 0}^ k \\texttt{Neighbor} (\\mathcal{V}_i, \\mathcal{G}, j)\\), where \\(\\texttt{Neighbor}\\) is a function which returns exact \\(j\\)-hop neighborhood of each node in \\(\\mathcal{V}_i\\) in \\(\\mathcal{G}\\).</li> <li>NOTE : \\(\\bigoplus\\) (\\bigoplus) is a direct sum operator.</li> <li>Input Node Set : For the data graph \\(\\mathcal{G}^D\\), the nodes in \\(\\mathcal{V}_i\\) (before contextualization) correspond to this set. For node classification, it is a single target node whereas for link prediction it is a pair of nodes.</li> </ul> </li> <li> <p>Task graph : After contextualizing each data-point to a data graph \\(\\mathcal{G}^D\\), we then construct task graph \\(\\mathcal{G}^T\\) to better capture the connection and relationship among the inputs and the labels.</p> <ul> <li>For each data graph \\(\\mathcal{G}_i^D\\), we represent the input as data node \\(v_{x_i}\\).</li> <li>For each label \\(y_i \\in \\mathcal{Y}\\), we represent the label as label node \\(v_{y_i}\\).</li> <li>So, overall task graph contains \\(m \\cdot k + n\\) data nodes and \\(m\\) label nodes. (\\(m \\cdot k\\) prompt examples and \\(n\\) queries)</li> <li>For the query set, we add single directional edge from each label node to each query data node.</li> <li>For prompt examples, each data node is connected to every label node via bidirectional edges, where edge with true labels are marked as \\(\\texttt{T}\\) and rest are marked as \\(\\texttt{F}\\).</li> </ul> </li> </ol> <p>It is also possible to extend prompt graph to non-classification tasks and free-form text prompting. For example, for numerical regression and other free-form generation tasks (e.g. text generation), one can extend our task graph to contain vector values on the edges to represent \\(y_i\\).</p> <p>What I understood is that they don't mean that by just extending vector values on edges can solve the problem of numerical regression and free-form generation tasks. They mean that by adding vector values on edges, we can represent different prediction tasks. Suppose, an edge has vector {1, 0} then it means that for task1, it is true and for task2, it is false. So, we can have multiple tasks on the same prompt graph.</p>","tags":["Prompting","ICL","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-PRODIGY/#42-pre-training","title":"4.2. Pre-training","text":"<p>We need a pre-training strategy that can pre-train a generalizable model capable of in-context learning. We assume access to pre-train graph \\(\\mathcal{G}_\\texttt{pretrain}\\) which is independent of of source graph \\(\\mathcal{G}\\) for downstream task. Prompt examples and queries are sampled from \\(\\mathcal{G}\\) and model is trained on \\(\\mathcal{G}_\\texttt{pretrain}\\) which we want to be generalizable to a graph \\(\\mathcal{G}\\). </p>","tags":["Prompting","ICL","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-PRODIGY/#421-message-passing-architecture-over-prompt-graph","title":"4.2.1. Message Passing Architecture over Prompt Graph","text":"<ol> <li> <p>Data Graph Message Passing : We use MP (message passing) GNN \\(M_\\texttt{D}\\) that learns node embeddings \\(E\\) for nodes in each \\(\\mathcal{G}^D\\). Here, \\(d\\) is the embedding dimension and \\(\\mathcal{G}^D\\) is the whole data graph and not individual data graph for each data-point. \\(M_D\\) can be implemented using GCN or GAT.</p> \\[E \\in \\mathbb{R}^{|\\mathcal{V}^D| \\times d} = M_D (\\mathcal{G}^D)\\] <p>To get single embedding \\(G_i\\) of each data graph, we aggregate the node embeddings using some pooling function.</p> <ul> <li> <p>For node classification, pooling updates the node representation of single input node \\(\\mathcal{V}_i\\), for prediction.</p> \\[G_i = E_{\\mathcal{V}_i}\\] </li> <li> <p>For link prediction, we concatenate the embeddings of the pair of input nodes, as well as max pooling over all node embeddings (including input pair of nodes, I think) with an additional linear layer to convert the embedding size back to \\(d\\).</p> \\[G_i = W^T(E_{v_1 \\in \\mathcal{V}_i} || E_{v_2 \\in \\mathcal{V}_i} || max(E_i)) + b\\] <p>where || represents concatenation, \\(W \\in \\mathbb{R}^{3d \\times d}\\) is learnable weight matrix and \\(b\\) is learnable bias.</p> </li> </ul> <p>NOTE : After performing this step, we get the embedding of data nodes \\(v_x\\) in the task graph \\(\\mathcal{G}^T\\). So, we can say that the task graph \\(\\mathcal{G}^T\\) is now contextualized.</p> </li> <li> <p>Task Graph Message Passing : In previous step, there is no communication between \\(\\mathcal{S}\\) and \\(\\mathcal{Q}\\). So, we do this via message over task graph \\(\\mathcal{G}^T\\). Using the connections in the task graph, we want to update the node embeddings of data nodes and label nodes.</p> <p>The initial embedding of data node \\(v_{x_i}\\) is \\(G_i\\) and the embedding of label node \\(v_{y_i}\\) can either be initialized with random Gaussian or  using some additional information available about the labels.</p> <p>Each edge has two binary features \\(e_{ij}\\) that indicates 1) whether edge comes from an example or query, and 2) the edge type, i.e, \\(\\texttt{T}\\) or \\(\\texttt{F}\\).</p> <p>So, we apply another GNN \\(M_\\texttt{T}\\) to update the node embeddings of task graph \\(\\mathcal{G}^T\\). </p> \\[H = M_T (\\mathcal{G}^T)\\] <p>For \\(M_T\\), attention based GNN was used, where each nodes perform attention to other nodes at each layer.</p> <pre><code>The goal of this step is to learn a better representation of the label nodes using the support examples and propagate label information back to the support and query graph representation for a more task-specific graph representation.\n</code></pre> </li> </ol>","tags":["Prompting","ICL","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-PRODIGY/#422-in-context-pre-training-objectives","title":"4.2.2. In-context Pre-training Objectives","text":"","tags":["Prompting","ICL","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-PRODIGY/#pre-training-task-generation","title":"Pre-training Task Generation","text":"","tags":["Prompting","ICL","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-PRODIGY/#prompt-graph-generation-with-augmentation","title":"Prompt Graph generation with augmentation","text":"","tags":["Prompting","ICL","Graphs"]},{"location":"Notes/Graph_Neural_Networks/icl-over-graphs-PRODIGY/#pre-training-loss","title":"Pre-training Loss","text":"","tags":["Prompting","ICL","Graphs"]},{"location":"Notes/Maths/","title":"Maths","text":""},{"location":"Notes/Maths/#1-overview","title":"1. Overview","text":"<p>This section will contain notes related to Math topics</p>"},{"location":"Notes/Maths/#2-structure","title":"2. Structure","text":"<p>Some of the broad topics which will go into this section are:</p> <ul> <li>Concepts from statistics, information theory</li> <li>Probability Concepts</li> <li>Calculus</li> </ul> <p>Further, this section can contain sub-sections.</p>"},{"location":"Notes/Maths/#3-tags","title":"3. Tags","text":"<p>I will make a list of tags which were used for this section. Whatever thing I had in my mind, I can easily look up the tags to check whether I already covered it or not.</p> <p>Following are the tags which were used in this section:</p> <ul> <li>LaTeX</li> </ul>"},{"location":"Notes/Maths/bigoplus/","title":"\\bigoplus","text":"","tags":["LaTeX"]},{"location":"Notes/Maths/bigoplus/#1-bigoplus-operator","title":"1. \\bigoplus operator","text":"<p>This operator looks like this \\(\\rightarrow\\bigoplus\\). In LaTeX, we use <code>$\\bigoplus$</code> for this, and hence, the title name.(since you cannot use LaTeX math mode in title ;-;)</p>","tags":["LaTeX"]},{"location":"Notes/Maths/bigoplus/#2-definition","title":"2. Definition","text":"<p>\\(\\bigoplus\\) is a direct sum operator. I will give an example using graphs to explain this.</p> <ul> <li>Suppose only the nodes {\\(v_1\\), \\(v_2\\), \\(v_3\\)} \\(\\in \\mathcal{V}\\) are given and I want to construct a subgraph \\(\\mathcal{G}^D\\) = (\\(\\mathcal{V}^D\\), \\(\\mathcal{E}^D\\), \\(\\mathcal{R}^D\\)) around it by sampling its \\(k\\)-hop neighborhood from the graph \\(\\mathcal{G}\\).</li> <li>Then we find the \\(k\\)-hop neighbors of each node \\(v_m \\in \\mathcal{V}\\), denoted as (\\(\\mathcal{V}_{m}\\), \\(\\mathcal{E}_{m}\\), \\(\\mathcal{R}_{m}\\)).</li> <li>\\((\\mathcal{V}_{m}, \\mathcal{E}_{m}, \\mathcal{R}_{m}) =\\) subgraph obtained by sampling \\(k\\)-hop neighborhood of the node \\(v_m \\in \\mathcal{V} \\;\\;\\; \\forall m = 1, 2, 3\\).</li> <li>Finally, you have sets of vertices, sets of edges and sets of relations. We take union of these sets respectively over \\(m = 1, 2, 3\\) to obtain the desired subgraph \\(\\mathcal{G}^D\\).  </li> <li>\\(\\mathcal{V}^D = \\bigcup_{m=1}^{m=3} \\mathcal{V}_{m}\\), \u2002 \\(\\mathcal{E}^D = \\bigcup_{m=1}^{m=3} \\mathcal{E}_{m}\\) \u2002 and \u2002 \\(\\mathcal{R}^D = \\bigcup_{m=1}^{m=3} \\mathcal{R}_{m}\\)</li> <li>This can be equivalently represented as \\(\\mathcal{G}^D = \\bigoplus_{m=1}^{m=3} (\\mathcal{V}_{m}, \\mathcal{E}_{m}, \\mathcal{R}_{m})\\)</li> </ul>","tags":["LaTeX"]},{"location":"Notes/Miscellaneous/","title":"Miscellaneous","text":""},{"location":"Notes/Miscellaneous/#1-overview","title":"1. Overview","text":"<p>This section will contain miscellaneous  notes that doesn't come under the umbrella topics of other sections like Deep Learning, Graph Neural Networks, etc.</p>"},{"location":"Notes/Miscellaneous/#2-structure","title":"2. Structure","text":"<p>Some of the broad topics which will go into this section are:</p> <ul> <li>Classical ML like SVM, kNN, etc.</li> <li>Generic things about ML like bias-variance tradeoff, etc.</li> <li>Accuracy, Precision, Recall, etc.</li> </ul> <p>Further, this section can contain sub-sections. For example, if on a particular topic like SVM, I have a few notes, then I can create a sub-section for it.</p>"},{"location":"Notes/Miscellaneous/#3-tags","title":"3. Tags","text":"<p>I will make a list of tags which were used for this section. Whatever thing I had in my mind, I can easily look up the tags to check whether I already covered it or not.</p> <p>Following are the tags which were used in this section:</p> <ul> <li>Basics</li> <li>ICL</li> </ul>"},{"location":"Notes/Miscellaneous/contrastive-learning/","title":"Contrastive Learning","text":""},{"location":"Notes/Miscellaneous/contrastive-learning/#1-definition","title":"1. Definition","text":"<p>Contrastive learning aims at learning low-dimensional representations of data by contrasting between similar and dissimilar samples.</p> <p>What this means is that it tries to bring similar samples close to each other in the representation space and push dissimilar samples away from each other.</p> <p>Let's suppose we have 3 images, \\(I_1\\), \\(I_2\\) and \\(I_3\\), where \\(I_1\\) and \\(I_2\\) belongs to same class (e.x. dog) and \\(I_3\\) belongs to different class (e.x. cat). The representation space will look something like this:</p> <p></p> <p>We see that the distance \\(d(x_1, x_2)\\) is small compared to \\(d(x_1, x_3)\\) and \\(d(x_2, x_3)\\) where \\(d()\\) is a metric function like euclidean.</p>"},{"location":"Notes/Miscellaneous/contrastive-learning/#2-loss-functions","title":"2. Loss Functions","text":""},{"location":"Notes/Miscellaneous/contrastive-learning/#21-contrastive-loss","title":"2.1. Contrastive Loss","text":"<p>We suppose that we have a pair (\\(I_i\\), \\(I_j\\)) and a label \\(Y\\) that is equal to 0 if the samples are similar and 1 otherwise. To extract a low-dimensional representation of each sample, we use a Convolutional Neural Network \\(f\\) that encodes the input images \\(I_i\\) and \\(I_j\\) into an embedding space where \\(x_i = f(I_i)\\) and \\(x_j = f(I_j)\\). The contrastive loss is defined as:  </p> \\[\\mathbf{L = (1-Y) * ||x_i - x_j||^2 + Y * max(0, m - ||x_i - x_j||^2)}\\] <p>where \\(m\\) is a hyperparameter, defining lower bound distance between dissimilar samples. This can be thought of as :  </p> <ul> <li>If \\(Y = 0\\), then samples are similar and hence, we want to minimize the distance between \\(\\mathbf{x_i}\\) and \\(\\mathbf{x_j}\\).  </li> <li>If \\(Y = 1\\), then samples are dissimilar and minimizing \\(\\mathbf{L}\\) means we want to make the term \\(m - ||x_i - x_j||^2\\) \\(\\leq\\) 0. Thus, we want the distance between \\(\\mathbf{x_i}\\) and \\(\\mathbf{x_j}\\) to be maximized and greater than the lower bound \\(m\\).</li> <li>[NOTE :] This is not a classification task. We are trying to learn the embedding \\(\\mathbf{x_i}\\) for the \\(i\\)-th sample.</li> </ul>"},{"location":"Notes/Miscellaneous/contrastive-learning/#22-triplet-loss","title":"2.2. Triplet Loss","text":"<p>It takes triplet as input : an anchor sample \\(I\\), a positive sample \\(I^{+}\\) and a negative sample \\(I^{-}\\). During training, the loss function enforces the distance between anchor and positive sample to be less than the distance between anchor and negative sample.</p> <p>The triplet loss is defined as:</p> \\[\\mathbf{L = max(0, ||x - x^{+}||^2 - ||x - x^{-}||^2 + m)}\\] <p>where \\(m\\) is a hyperparameter defined in contrastive loss. Here also, we want dissimilar to be far and similar to be close so that the term \\(||x - x^{+}||^2 - ||x - x^{-}||^2 + m\\) \\(\\leq\\) 0.</p>"},{"location":"Notes/Miscellaneous/contrastive-learning/#3-types-of-learning","title":"3. Types of Learning","text":""},{"location":"Notes/Miscellaneous/contrastive-learning/#31-self-supervised-learning","title":"3.1. Self-Supervised Learning","text":"<p>When we don't have labeled samples, we use unsupervised learning, also known as self-supervised learning.</p> <p>A famous self-supervised framework for unsupervised contrastive learning is SimCLR. Its main idea is to generate positive image pairs by applying random transformations in the anchor image like crop, flip and color jitter since these changes keep the label of the image unchanged.</p>"},{"location":"Notes/Miscellaneous/contrastive-learning/#32-supervised-learning","title":"3.2. Supervised Learning","text":"<p>The label of each sample is available during training. So, we can generate positive and negative pairs or triplets by just looking at the labels. </p> <p>Positive Pairs : Samples with same label Negative Pairs : Samples with different label</p> <p>However, generating all possible pairs or triplets requires a lot of time and computational resources. Also, in every dataset, there are many negative pairs or triplets that already satisfy the contrastive training objectives and give zero loss resulting in slow training convergence.</p> <p>To deal with this problem, we have to generate hard pairs and hard triplets, meaning that their loss value is high, i.e., similar pairs that are far apart and dissimilar pairs that are very close. </p> <p>Many hard negative mining methods have been proposed that usually look into the representation space for hard pairs and triplets using fast search algorithms.</p> <pre><code>It only makes sense that this kind of contrastive learning will be used mostly with self-supervised (unsupervised) or semi-supervised settings.\n</code></pre>"},{"location":"Notes/Miscellaneous/contrastive-learning/#4-related-discussion","title":"4. Related Discussion","text":"<ol> <li>Different types of Learning in Machine Learning setting is covered in this post Types of Learning.</li> </ol>"},{"location":"Notes/Miscellaneous/in-context-learning/","title":"In-context Learning (ICL)","text":"","tags":["ICL"]},{"location":"Notes/Miscellaneous/in-context-learning/#1-definition","title":"1. Definition","text":"<p>In-context Learning or ICL was defined in \"Language Models are few-shot learners\" by Brown et al., the paper that introduced GPT-3. The authors define ICL as:</p> <p>During unsupervised pre-training, a language model develops a broad set of skills and pattern recognition abilities. It then uses these abilities at inference time to rapidly adapt to or recognize the desired task. We use the term \u201cin-context learning\u201d to describe the inner loop of this process, which occurs within the forward-pass upon each sequence.</p>","tags":["ICL"]},{"location":"Notes/Miscellaneous/in-context-learning/#2-icl-vs-size-of-the-model","title":"2. ICL vs Size of the Model","text":"<p>Aky\u00fcrek et al. make another observation that ICL exhibits algorithmic phase transitions as model depth increases:</p> <ul> <li>One-layer transformers\u2019 ICL behavior approximates a single step of gradient descent, while wider and deeper transformers match ordinary least squares or ridge regression solutions.</li> <li>It is possible to imagine that if small models implement simple learning algorithms in-context, larger models might implement more sophisticated functions during ICL.</li> <li>Smaller models do not seem to learn from in-context examples, and larger ones do.</li> </ul>","tags":["ICL"]},{"location":"Notes/Miscellaneous/in-context-learning/#3-related-discussion","title":"3. Related Discussion","text":"<ol> <li>In ICL over Graphs : PRODIGY, I covered the paper \"PRODIGY : Enabling in-context learning over graphs\" which extends the concept of ICL to graphs.</li> </ol>","tags":["ICL"]},{"location":"Notes/Miscellaneous/types-of-learning/","title":"Types of Learning","text":"<p>There are broadly 3 different types of learning in Machine Learning paradigm:</p> <ul> <li>Supervised Learning</li> <li>Unsupervised Learning</li> <li>Semi-supervised Learning</li> </ul>","tags":["Basics"]},{"location":"Notes/Miscellaneous/types-of-learning/#1-supervised-learning","title":"1. Supervised Learning","text":"","tags":["Basics"]},{"location":"Notes/Miscellaneous/types-of-learning/#2-unsupervised-learning","title":"2. Unsupervised Learning","text":"","tags":["Basics"]},{"location":"Notes/Miscellaneous/types-of-learning/#3-semi-supervised-learning","title":"3. Semi-supervised Learning","text":"<p>When we have a few labeled samples and a lot of unlabeled samples, we want to be able to use both of them to optimize the performance and learning capability of our model. This is the definition of Semi-supervised Learning.</p>","tags":["Basics"]},{"location":"Python/","title":"Python-Stuff","text":""},{"location":"Python/#1-overview","title":"1. Overview","text":"<p>This section will contain sub-sections of python libraries which are used for the implementation of the code.</p>"},{"location":"Python/#2-structure","title":"2. Structure","text":"<p>The sub-sections (e.x. Pytorch, or Numpy) will have posts which will cover either of the following :</p> <ul> <li>Functions : This will cover functions of the library which are tricky to use and understand. This will also cover the functions which are not used frequently but are useful. I will cover examples of my own by running and testing them so as to understand the working and test the edge cases of the function.</li> <li>Methods : This will cover methods, i.e., an ensemble of functions. Most of the code will be standard and we should try to adhere to the best practices instead of writing the code from the scratch. Hence, I will store the code snippets for common tasks in Machine Learning which are used frequently.</li> </ul>"},{"location":"Python/#3-tags","title":"3. Tags","text":"<p>From the above structure, it is clear that the posts will be divided into two categories :</p> <ul> <li>Function</li> <li>Method</li> </ul>"},{"location":"Techie_Tech/","title":"Techie Tech","text":""},{"location":"Techie_Tech/#1-overview","title":"1. Overview","text":"<p>In case it's not clear, Techie Tech is a wordplay on Richie Rich.</p> <p>This section will contain notes on various technologies, tools, and tricks which were helpful for me and in case I need to refer to them again, I can just come here and look them up ;)</p>"},{"location":"Techie_Tech/#2-structure","title":"2. Structure","text":"<p>This section will only contain notes and no sub sections. The notes will be tagged with the technology, tool, or trick they are related to.</p> <p>Alternative Name for this section: Random in Fun as it will contain random things which I found fun to learn.  </p>"},{"location":"Techie_Tech/#3-tags","title":"3. Tags","text":"<p>I will make a list of tags which were used for this section. Whatever thing I had in my mind, I can easily look up the tags to check whether I already covered it or not.</p> <p>Following are the tags which were used in this section:</p> <ul> <li>Markdown</li> <li>Algorithms</li> <li>Graphs</li> </ul>"},{"location":"Techie_Tech/markdown-things/","title":"Some Markdown Things","text":"<p>These things are specific to this repo, i.e., markdown using <code>mkdocs-material</code>. There are additional changes in <code>extra.css</code> which enables these features. NOTE : These may not work with other markdown editors.</p>","tags":["Markdown"]},{"location":"Techie_Tech/markdown-things/#1-note-referencing","title":"1. Note Referencing","text":"<ul> <li>While referencing a note whose name is not unique, like <code>index.md</code> use <code>[&lt;name&gt;](&lt;relative path&gt; like ../Definitions/index#subsection)</code></li> <li>In other cases, directly use <code>[[&lt;name_of_file&gt;#subsection | &lt;name&gt;]]</code>.</li> </ul>","tags":["Markdown"]},{"location":"Techie_Tech/markdown-things/#2-image-aligning-and-resizing","title":"2. Image Aligning and Resizing","text":"<ul> <li>Use <code>{: style=\"height:150px;width:150px\"}</code> after the image link. For example, <code>![](){: style=\"height:10cm;width:15cm\"}</code> or <code>![](){: style=\"height:90%;width:90%</code>.</li> <li>For center aligning, use <code>{: .center}</code> after the image link. For example, <code>![](){: .center style=\"height:100%;width:100%\"}</code>.</li> </ul>","tags":["Markdown"]},{"location":"Techie_Tech/DSA/bfs-dfs/","title":"BFS &amp; DFS","text":"","tags":["Algorithms","Graphs"]},{"location":"Techie_Tech/DSA/bfs-dfs/#1-bfs","title":"1. BFS","text":"<pre><code>vector&lt;int&gt; BFS(int V, vector&lt;int&gt; adj[]) {\nint visited[V] = {0};\nvisited[0] = 1; //start from node 0\nqueue&lt;int&gt; q;\nq.push(0);\nvector&lt;int&gt; bfs_nodes;\nwhile (!q.empty()) {\nint node = q.front();\nq.pop();\nbfs.push_back(node);\nfor (int nbr : adj[node]) {\nif (!visited[nbr]) {\nvisited[nbr] = 1;\nq.push(nbr);\n}\n}\n}\nreturn bfs_nodes;\n}\n</code></pre>","tags":["Algorithms","Graphs"]},{"location":"Techie_Tech/DSA/bfs-dfs/#2-dfs","title":"2. DFS","text":"<p><pre><code>void dfs(int node, vector&lt;int&gt;&amp; adj[], int visited[], vector&lt;int&gt;&amp; dfs_nodes) {\nvisited[node] = 1;\ndfs_nodes.push_back(node);\nfor (int nbr : adj[node]) {\nif (!visited[nbr]) {\ndfs (nbr, adj, visited, dfs_nodes);\n}\n}\n}\n</code></pre> <pre><code>vector&lt;int&gt; DFS(int V, vector&lt;int&gt; adj[]) {\nint visited[V] = {0};\nvector&lt;int&gt; dfs_nodes;\ndfs(0, adj, visited, dfs_nodes);\nreturn dfs_nodes;\n}\n</code></pre></p>","tags":["Algorithms","Graphs"]},{"location":"Techie_Tech/DSA/bfs-dfs/#3-complexity","title":"3. Complexity","text":"<ul> <li>Time Complexity -&gt; \\(O(V + E)\\)</li> <li>Space Complexity -&gt; \\(O(V)\\)</li> </ul>","tags":["Algorithms","Graphs"]},{"location":"Techie_Tech/DSA/meet-in-the-middle/","title":"Meet in the Middle","text":"","tags":["Algorithms"]},{"location":"Techie_Tech/DSA/meet-in-the-middle/#1-what-is-this","title":"1.  What is this?","text":"<p>Meet in the middle is a search technique which is used when the input is small but not as small that brute force can be used. Like divide and conquer it splits the problem into two, solves them individually and then merge them. But we can\u2019t apply meet in the middle like divide and conquer because we don\u2019t have the same structure as the original problem.</p> <p>For subset problems, reduce time complexity from \\(O(2^n)\\) to \\(O(2^{n/2}*n)\\).</p>","tags":["Algorithms"]},{"location":"Techie_Tech/DSA/meet-in-the-middle/#2-how-to-use-it","title":"2.  How to use it?","text":"<ul> <li> <p>Problem statement :</p> <p>You are given an integer array <code>nums</code> of <code>2 * n</code> integers. You need to partition nums into two arrays of length <code>n</code> to minimize the absolute difference of the sums of the arrays. To partition <code>nums</code>, put each element of <code>nums</code> into one of the two arrays.</p> <p>Return the minimum possible absolute difference.</p> </li> <li> <p>Solution :</p> <ul> <li>Partition the array into two halves of size <code>n / 2</code> each.</li> <li>Pre-compute the sum of all possible subsets / subsequences corresponding to length <code>i</code> in <code>sum1[i]</code> for left half. <code>i</code> varies from <code>0</code> to <code>n / 2</code>. Similarly for the right half.</li> <li>Now to make subset of size <code>n / 2</code>, we take subset of length <code>i</code> from left size and <code>n / 2 - i</code> from right side.</li> <li>Thus, we iterate over <code>i = 0 to i = n / 2</code> and for each <code>sum1[i]</code>, we first sort the <code>sum2[n / 2 - i]</code> and use lower bound to find the closest value to <code>totSum / 2</code>. (<code>totSum</code> is sum of all the elements of the array)</li> <li>Time complexity is \\(O(2 * 2 ^ {n / 2})\\) for finding every subset sum and \\(O(log (2^{n / 2})) = O(n / 2)\\) for binary search. Thus, total time complexity is \\(O(2^{n / 2} * n)\\).</li> </ul> </li> </ul>","tags":["Algorithms"]},{"location":"Techie_Tech/DSA/meet-in-the-middle/#3-references","title":"3.  References","text":"<ul> <li>Meet in the Middle - GeeksforGeeks</li> <li>Partition Array Into Two Arrays to Minimize Sum Difference - Leetcode</li> </ul>","tags":["Algorithms"]},{"location":"Techie_Tech/DSA/sliding-windows/","title":"Sliding Window","text":"","tags":["Algorithms"]},{"location":"Techie_Tech/DSA/sliding-windows/#1-type-1","title":"1. Type 1","text":"<p>For problems in which we can update sliding window based on the conditions in the problem, we maintain two pointers <code>i</code> (or start) and <code>j</code> (or end). Run a <code>for</code> loop on <code>j</code>. WHen particular condition is satisfied, update the <code>i</code> pointer and the sliding window and add to the <code>ans</code> accordingly.</p>","tags":["Algorithms"]},{"location":"Techie_Tech/DSA/sliding-windows/#2-type-2","title":"2. Type 2","text":"<p>Example problem statement : Given an integer array <code>nums</code> and an integer <code>k</code>, return the number of good subarrays of <code>nums</code>. A good array is an array where the number of different integers in that array is exactly <code>k</code>.</p> <p>Solution : Since, updating sliding window based on this rule seems improbable, we will slightly reformulate the problem as finding subarrays with at most <code>k</code> different elements. This way we can find answer simply by <code>atMost(k) - atMost(k - 1)</code>.</p> <pre><code>int subarraysWithKDistinct(vector&lt;int&gt;&amp; nums, int k) {\nreturn atMost(nums, k) - atMost(nums, k - 1);\n}\nint atMost(vector&lt;int&gt;&amp; nums, int k) {\nint n = nums.size();\nint i = 0, j = 0, ans = 0;\nmap&lt;int, int&gt; mp;\nfor (int j = 0; j &lt; n; j++) {\nmp[nums[j]]++;\nwhile (mp.size() &gt; k) {\nif (mp[nums[i]] == 1) mp.erase(nums[i]);\nelse mp[nums[i]]--;\ni++;\n}\nans += j - i + 1;\n}\nreturn ans;\n}\n</code></pre>","tags":["Algorithms"]},{"location":"Techie_Tech/DSA/sorting-methods/","title":"Sorting Methods","text":"","tags":["Algorithms"]},{"location":"Techie_Tech/DSA/sorting-methods/#1-selection-sort","title":"1. Selection Sort","text":"<pre><code>void selectionSort(int arr[], int n) {\nfor (int i = 0; i &lt; n - 1; i++) {\nint minIndex = i;\nfor (int j = i + 1; j &lt; n; j++) {\nif (arr[j] &lt; arr[minIndex]) {\nminIndex = j;\n}\n}\nswap(arr[i], arr[minIndex]);\n}\n}\n</code></pre> <ul> <li>Time Complexity -&gt; \\(O(n^2)\\)</li> <li>Space Complexity -&gt; \\(O(1)\\)</li> </ul>","tags":["Algorithms"]},{"location":"Techie_Tech/DSA/sorting-methods/#2-bubble-sort","title":"2. Bubble Sort","text":"<pre><code>void bubbleSort(int arr[], int n) {\nfor (int i = 0; i &lt; n - 1; i++) {\nfor (int j = 0; j &lt; n - i - 1; j++) {\nif (arr[j] &gt; arr[j + 1]) {\nswap(arr[j], arr[j + 1]);\n}\n}\n}\n}\n</code></pre> <ul> <li>Time Complexity -&gt; \\(O(n^2)\\)</li> <li>Space Complexity -&gt; \\(O(1)\\)</li> </ul>","tags":["Algorithms"]},{"location":"Techie_Tech/DSA/sorting-methods/#3-insertion-sort","title":"3. Insertion Sort","text":"<pre><code>void insertionSort(int arr[], int n) {\nfor (int i = 1; i &lt; n; i++) {\nint key = arr[i];\nint j = i - 1;\nwhile (j &gt;= 0 &amp;&amp; arr[j] &gt; key) {\narr[j + 1] = arr[j];\nj--;\n}\narr[j + 1] = key;\n}\n}\n</code></pre> <ul> <li>Time Complexity -&gt; \\(O(n^2)\\)</li> <li>Space Complexity -&gt; \\(O(1)\\)</li> </ul>","tags":["Algorithms"]},{"location":"Techie_Tech/DSA/sorting-methods/#4-merge-sort","title":"4. Merge Sort","text":"<pre><code>void merge(vector&lt;int&gt; &amp;arr, int low, int mid, int high) {\nvector&lt;int&gt; temp; int left = low;      int right = mid + 1;  while (left &lt;= mid &amp;&amp; right &lt;= high) {\nif (arr[left] &lt;= arr[right]) {\ntemp.push_back(arr[left]);\nleft++;\n}\nelse {\ntemp.push_back(arr[right]);\nright++;\n}\n}\nwhile (left &lt;= mid) {\ntemp.push_back(arr[left]);\nleft++;\n}\nwhile (right &lt;= high) {\ntemp.push_back(arr[right]);\nright++;\n}\nfor (int i = low; i &lt;= high; i++) {\narr[i] = temp[i - low];\n}\n}\n</code></pre> <pre><code>void mergeSort(vector&lt;int&gt; &amp;arr, int low, int high) {\nif (low &gt;= high) return;\nint mid = (low + high) / 2 ;\nmergeSort(arr, low, mid);  mergeSort(arr, mid + 1, high); merge(arr, low, mid, high); }\n</code></pre> <ul> <li>Time Complexity -&gt; \\(O(n*logn)\\) </li> <li>Space Complexity -&gt; \\(O(n)\\)</li> <li>Can be done in O(1) space complexity</li> </ul>","tags":["Algorithms"]},{"location":"Techie_Tech/DSA/sorting-methods/#5-quick-sort","title":"5. Quick Sort","text":"<p><pre><code>int partition(vector&lt;int&gt; &amp;arr, int low, int high) {\nint pivot = arr[low];\nint i = low;\nint j = high;\nwhile (i &lt; j) {\nwhile (arr[i] &lt;= pivot &amp;&amp; i &lt;= high - 1) {\ni++;\n}\nwhile (arr[j] &gt; pivot &amp;&amp; j &gt;= low + 1) {\nj--;\n}\nif (i &lt; j) swap(arr[i], arr[j]);\n}\nswap(arr[low], arr[j]);\nreturn j;\n}\n</code></pre> <pre><code>void qs(vector&lt;int&gt; &amp;arr, int low, int high) {\nif (low &lt; high) {\nint pIndex = partition(arr, low, high);\nqs(arr, low, pIndex - 1);\nqs(arr, pIndex + 1, high);\n}\n}\n</code></pre> <pre><code>vector&lt;int&gt; quickSort(vector&lt;int&gt; arr) {\nqs(arr, 0, arr.size() - 1);\nreturn arr;\n}\n</code></pre></p> <ul> <li>Avg. Time Complexity -&gt; \\(O(n*logn)\\)</li> <li>Worst Time Complexity -&gt; \\(O(n^2)\\) </li> <li>Space Complexity -&gt; \\(O(1)\\)</li> <li>Auxiliary Space Complexity -&gt; \\(O(n)\\) (for recursive calls on stack) (on avg., it will be \\(O(logn)\\) but in worst case it will be \\(O(n)\\))</li> </ul>","tags":["Algorithms"]},{"location":"Techie_Tech/DSA/topo-sort/","title":"Topological Sort","text":"","tags":["Algorithms","Graphs"]},{"location":"Techie_Tech/DSA/topo-sort/#1-definition","title":"1. Definition","text":"<ul> <li>In topological sorting, node <code>u</code> will always appear before node <code>v</code> if there is a directed edge from node <code>u</code> towards node <code>v</code>, i.e., <code>u</code> -&gt; <code>v</code>.</li> <li>This is only possible for Directed Acyclic Graphs (DAGs).</li> </ul>","tags":["Algorithms","Graphs"]},{"location":"Techie_Tech/DSA/topo-sort/#using-dfs","title":"Using DFS","text":"<pre><code>void dfs(int node, int vis[], stack&lt;int&gt; &amp;st, vector&lt;int&gt; adj[]) {\nvis[node] = 1;\nfor (auto it : adj[node]) {\nif (!vis[it]) dfs(it, vis, st, adj);\n}\nst.push(node);\n}\nvector&lt;int&gt; topoSort(int V, vector&lt;int&gt; adj[]) {\nint vis[V] = {0};\nstack&lt;int&gt; st;\nfor (int i = 0; i &lt; V; i++) {\nif (!vis[i]) {\ndfs(i, vis, st, adj);\n}\n}\nvector&lt;int&gt; ans;\nwhile (!st.empty()) {\nans.push_back(st.top());\nst.pop();\n}\nreturn ans;\n}\n</code></pre> <ul> <li>This Algorithm assumes that graph is DAG.</li> </ul>","tags":["Algorithms","Graphs"]},{"location":"Techie_Tech/DSA/topo-sort/#using-bfs-kahns-algorithm","title":"Using BFS (Kahn's Algorithm)","text":"<pre><code>vector&lt;int&gt; findOrder(int n, vector&lt;vector&lt;int&gt;&gt;&amp; adj) {\nvector&lt;int&gt; indegree(n, 0);\nfor (int i = 0; i &lt; n; i++) {\nfor (int j : adj[i]) {\nindegree[j]++;\n}\n}\nqueue&lt;int&gt; q;\nfor (int i = 0; i &lt; n; i++) {\nif (indegree[i] == 0) q.push(i);\n}\nvector&lt;int&gt; ans;\nwhile (!q.empty()) {\nint node = q.front();\nq.pop();\nans.push_back(node);\nfor (int nbr : adj[node]) {\nif (--indegree[nbr] == 0) {\nq.push(nbr);\n}\n}\n}\nreturn (ans.size() == n) ? ans : vector&lt;int&gt;(); //check if there's a cycle\n}\n</code></pre>","tags":["Algorithms","Graphs"]}]}